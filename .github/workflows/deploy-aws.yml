name: Build and deploy SPA to AWS

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, reopened, synchronize]

# This workflow runs the following jobs on all commits to PRs as well as the branches specified above:
#   - test
#   - lint
#   - cypress-run-chrome
#   - cypress-run-a11y

# deploy-staging and deploy-production are only run if the branch being pushed to is either staging or production, respectivly.
# These jobs cannot run unless all previous jobs also pass.

# Our overall deployment looks like the following
#                           test
#                           lint                   (if branch == staging) deploy-staging
#  install_dependencies =>  cypress-run-chrome  => (if branch == production) deploy-production
#                           cypress-run-a11y

jobs:
  install_dependencies:
    runs-on: ubuntu-20.04
    container: node:18
    env:
      NPM_TOKEN: ${{ secrets.DEVOPS_ALL_NPM_TOKEN }}
      SEGMENT_TYPEWRITER_TOKEN: ${{ secrets.DEVOPS_ALL_SEGMENT_TYPEWRITER_TOKEN }}
      CYPRESS_CACHE_FOLDER: ~/.cache/Cypress
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Cache Linux node modules
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: |
            node_modules
            ./src/analytics
            ~/.cache/Cypress
          key: ${{ runner.os }}-v2-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
      - name: yarn install
        run: yarn --frozen-lockfile --network-timeout 120000
      - name: install typewriter analytics utilities
        run: yarn typewriter:prod

  # The following test job is just a default. You will need to add your repos testing commands
  # to this job to make sure your tests run
  test:
    runs-on: ubuntu-20.04
    container: node:18
    needs: [install_dependencies]
    env:
      NPM_TOKEN: ${{ secrets.DEVOPS_ALL_NPM_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Restore node modules cache
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: |
            node_modules
            ./src/analytics
            ~/.cache/Cypress
          key: ${{ runner.os }}-v2-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
      - name: Restore jest cache
        uses: actions/cache@v4
        env:
          cache-name: jest-cache
        with:
          path: jest-cache
          key: ${{ runner.os }}-v2-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
      - name: Testing code
        run: yarn test:coverage

  # The following linting job is just a default. You will need to add your repos lint commands
  # to this job to make sure your lint runs
  lint:
    runs-on: ubuntu-20.04
    container: node:18
    needs: [install_dependencies]
    env:
      NPM_TOKEN: ${{ secrets.DEVOPS_ALL_NPM_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Restore node modules cache
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: |
            node_modules
            ./src/analytics
            ~/.cache/Cypress
          key: ${{ runner.os }}-v2-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
      - name: Linting code
        run: yarn lint

  cypress-run-chrome:
    runs-on: ubuntu-20.04
    container:
      image: cypress/browsers:node-18.16.0-chrome-112.0.5615.121-1-ff-112.0.1-edge-112.0.1722.48-1
      options: --user 1001
    needs: [install_dependencies]
    steps:
      - uses: actions/checkout@v4
      - name: Restore node modules cache
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: |
            node_modules
            ./src/analytics
            ~/.cache/Cypress
          key: ${{ runner.os }}-v2-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
      - name: Build App for testing
        run: yarn build:cypress
        env:
          NODE_ENV: 'production'
          ENV_FILE: 'staging'
      - name: Cypress Chrome run
        uses: cypress-io/github-action@v6
        env:
          ENV_FILE: 'staging'
        with:
          start: yarn start:ws
          wait-on: 'http://localhost:8080'
          browser: chrome
          spec: ./cypress/e2e/end_to_end.cy.ts
      - name: Archive screenshots for debugging
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: cypress-screenshots
          path: cypress/screenshots
      - name: Archive videos for debugging
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: cypress-videos
          path: cypress/videos
    env:
      NPM_TOKEN: ${{ secrets.DEVOPS_ALL_NPM_TOKEN }}
      CYPRESS_auth_client_id: ${{ secrets.CYPRESS_auth_client_id }}
      CYPRESS_auth_client_secret: ${{ secrets.CYPRESS_auth_client_secret }}
      CYPRESS_auth_username: ${{ secrets.CYPRESS_auth_username }}
      CYPRESS_auth_password: ${{ secrets.CYPRESS_auth_password }}
      CYPRESS_CACHE_FOLDER: ~/.cache/Cypress

  cypress-run-a11y:
    runs-on: ubuntu-20.04
    container:
      image: cypress/browsers:node-18.16.0-chrome-112.0.5615.121-1-ff-112.0.1-edge-112.0.1722.48-1
      options: --user 1001
    needs: [install_dependencies]
    steps:
      - uses: actions/checkout@v4
      - name: Restore node modules cache
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          path: |
            node_modules
            ./src/analytics
            ~/.cache/Cypress
          key: ${{ runner.os }}-v2-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
      - name: Build App for testing
        run: yarn build:cypress
        env:
          NODE_ENV: 'production'
          ENV_FILE: 'staging'
      - name: Cypress A11y run
        uses: cypress-io/github-action@v6
        env:
          ENV_FILE: 'staging'
        with:
          start: yarn start:ws
          wait-on: 'http://localhost:8080'
          browser: chrome
          spec: ./cypress/e2e/accessibility.cy.ts
      - name: Archive accessibility reports
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: accessibility-reports
          path: cypress/reports
    env:
      NPM_TOKEN: ${{ secrets.DEVOPS_ALL_NPM_TOKEN }}
      CYPRESS_auth_client_id: ${{ secrets.CYPRESS_auth_client_id }}
      CYPRESS_auth_client_secret: ${{ secrets.CYPRESS_auth_client_secret }}
      CYPRESS_auth_username: ${{ secrets.CYPRESS_auth_username }}
      CYPRESS_auth_password: ${{ secrets.CYPRESS_auth_password }}
      CYPRESS_CACHE_FOLDER: ~/.cache/Cypress

  deploy-staging:
    name: Deploy SPA to staging
    if: github.ref == 'refs/heads/main'
    needs: [lint, test, cypress-run-chrome, cypress-run-a11y]
    uses: ./.github/workflows/deploy-app-to-aws.yml
    with:
      env: 'staging'
      github_environment: 'staging'
      env_file: 'staging'
      node_env: 'production'
      cloudfront_distribution_name: ${{ github.event.repository.name }}-staging
      cache_path: v2
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.DEVOPS_STAGING_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DEVOPS_STAGING_AWS_SECRET_ACCESS_KEY }}
      NPM_TOKEN: ${{ secrets.DEVOPS_ALL_NPM_TOKEN }}
      GITHUB_API_ACCESS_TOKEN: ${{ secrets.DEVOPS_ALL_GITHUB_API_ACCESS_TOKEN }}
      SEGMENT_TYPEWRITER_TOKEN: ${{ secrets.DEVOPS_ALL_SEGMENT_TYPEWRITER_TOKEN }}
      # Required for DORA metrics
      JELLYFISH_API_TOKEN: ${{ secrets.JELLYFISH_API_TOKEN }}
      DEVOPS_DATADOG_API_KEY: ${{ secrets.DEVOPS_DATADOG_API_KEY }}

  deploy-production:
    name: Deploy SPA to production
    # Note that if you change the branch that is deployed to production, then
    # you will need to change the following line to match the correct branch.

    # For exammple, if you want to deploy `default` to prod, then the following line would read
    # if: github.ref == 'refs/heads/default'
    if: github.ref == 'refs/heads/main'
    # The following line ensures that the deplouyment ONLY runs after required preceeding jobs
    # have run and succeded. By default, we only provide an example linting and testing pre-req job.!And

    # You will need to add any extra required jobs in this file, and then add that job to the following array to make
    # sure deployment only runs after those jobs succeed.
    needs: [deploy-staging]
    uses: ./.github/workflows/deploy-app-to-aws.yml
    with:
      env: 'prod'
      github_environment: 'production'
      env_file: 'prod'
      node_env: 'production'
      cloudfront_distribution_name: ${{ github.event.repository.name }}
      cache_path: v2
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.DEVOPS_PROD_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.DEVOPS_PROD_AWS_SECRET_ACCESS_KEY }}
      NPM_TOKEN: ${{ secrets.DEVOPS_ALL_NPM_TOKEN }}
      SEGMENT_TYPEWRITER_TOKEN: ${{ secrets.DEVOPS_ALL_SEGMENT_TYPEWRITER_TOKEN }}
      # Required for DORA metrics
      JELLYFISH_API_TOKEN: ${{ secrets.JELLYFISH_API_TOKEN }}
      DEVOPS_DATADOG_API_KEY: ${{ secrets.DEVOPS_DATADOG_API_KEY }}
